// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: dbproxy.proto

package go_micro_service_dbproxy

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for DBProxyService service

type DBProxyService interface {
	// 执行用户注册
	ExecuteUserSignup(ctx context.Context, in *ReqSignup, opts ...client.CallOption) (*RespSignup, error)
	// 执行用户登录
	ExecuteUserSignin(ctx context.Context, in *ReqSignin, opts ...client.CallOption) (*RespSignin, error)
	// 更新token
	ExecuteUpdateToken(ctx context.Context, in *ReqUpdateToken, opts ...client.CallOption) (*RespUpdateToken, error)
	// 获取用户token
	ExecuteGetToken(ctx context.Context, in *ReqGetToken, opts ...client.CallOption) (*RespGetToken, error)
}

type dBProxyService struct {
	c    client.Client
	name string
}

func NewDBProxyService(name string, c client.Client) DBProxyService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.service.dbproxy"
	}
	return &dBProxyService{
		c:    c,
		name: name,
	}
}

func (c *dBProxyService) ExecuteUserSignup(ctx context.Context, in *ReqSignup, opts ...client.CallOption) (*RespSignup, error) {
	req := c.c.NewRequest(c.name, "DBProxyService.ExecuteUserSignup", in)
	out := new(RespSignup)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBProxyService) ExecuteUserSignin(ctx context.Context, in *ReqSignin, opts ...client.CallOption) (*RespSignin, error) {
	req := c.c.NewRequest(c.name, "DBProxyService.ExecuteUserSignin", in)
	out := new(RespSignin)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBProxyService) ExecuteUpdateToken(ctx context.Context, in *ReqUpdateToken, opts ...client.CallOption) (*RespUpdateToken, error) {
	req := c.c.NewRequest(c.name, "DBProxyService.ExecuteUpdateToken", in)
	out := new(RespUpdateToken)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBProxyService) ExecuteGetToken(ctx context.Context, in *ReqGetToken, opts ...client.CallOption) (*RespGetToken, error) {
	req := c.c.NewRequest(c.name, "DBProxyService.ExecuteGetToken", in)
	out := new(RespGetToken)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DBProxyService service

type DBProxyServiceHandler interface {
	// 执行用户注册
	ExecuteUserSignup(context.Context, *ReqSignup, *RespSignup) error
	// 执行用户登录
	ExecuteUserSignin(context.Context, *ReqSignin, *RespSignin) error
	// 更新token
	ExecuteUpdateToken(context.Context, *ReqUpdateToken, *RespUpdateToken) error
	// 获取用户token
	ExecuteGetToken(context.Context, *ReqGetToken, *RespGetToken) error
}

func RegisterDBProxyServiceHandler(s server.Server, hdlr DBProxyServiceHandler, opts ...server.HandlerOption) error {
	type dBProxyService interface {
		ExecuteUserSignup(ctx context.Context, in *ReqSignup, out *RespSignup) error
		ExecuteUserSignin(ctx context.Context, in *ReqSignin, out *RespSignin) error
		ExecuteUpdateToken(ctx context.Context, in *ReqUpdateToken, out *RespUpdateToken) error
		ExecuteGetToken(ctx context.Context, in *ReqGetToken, out *RespGetToken) error
	}
	type DBProxyService struct {
		dBProxyService
	}
	h := &dBProxyServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DBProxyService{h}, opts...))
}

type dBProxyServiceHandler struct {
	DBProxyServiceHandler
}

func (h *dBProxyServiceHandler) ExecuteUserSignup(ctx context.Context, in *ReqSignup, out *RespSignup) error {
	return h.DBProxyServiceHandler.ExecuteUserSignup(ctx, in, out)
}

func (h *dBProxyServiceHandler) ExecuteUserSignin(ctx context.Context, in *ReqSignin, out *RespSignin) error {
	return h.DBProxyServiceHandler.ExecuteUserSignin(ctx, in, out)
}

func (h *dBProxyServiceHandler) ExecuteUpdateToken(ctx context.Context, in *ReqUpdateToken, out *RespUpdateToken) error {
	return h.DBProxyServiceHandler.ExecuteUpdateToken(ctx, in, out)
}

func (h *dBProxyServiceHandler) ExecuteGetToken(ctx context.Context, in *ReqGetToken, out *RespGetToken) error {
	return h.DBProxyServiceHandler.ExecuteGetToken(ctx, in, out)
}
