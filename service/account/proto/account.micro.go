// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: account.proto

package go_micro_service_account

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AccountService service

type AccountService interface {
	// 用户注册
	Signup(ctx context.Context, in *ReqSignup, opts ...client.CallOption) (*RespSignup, error)
	// 用户登录
	Signin(ctx context.Context, in *ReqSignin, opts ...client.CallOption) (*RespSignin, error)
	// 更新token
	UpdateToken(ctx context.Context, in *ReqUpdateToken, opts ...client.CallOption) (*RespUpdateToken, error)
	// 获取token
	GetToken(ctx context.Context, in *ReqGetToken, opts ...client.CallOption) (*RespGetToken, error)
}

type accountService struct {
	c    client.Client
	name string
}

func NewAccountService(name string, c client.Client) AccountService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.service.account"
	}
	return &accountService{
		c:    c,
		name: name,
	}
}

func (c *accountService) Signup(ctx context.Context, in *ReqSignup, opts ...client.CallOption) (*RespSignup, error) {
	req := c.c.NewRequest(c.name, "AccountService.Signup", in)
	out := new(RespSignup)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) Signin(ctx context.Context, in *ReqSignin, opts ...client.CallOption) (*RespSignin, error) {
	req := c.c.NewRequest(c.name, "AccountService.Signin", in)
	out := new(RespSignin)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) UpdateToken(ctx context.Context, in *ReqUpdateToken, opts ...client.CallOption) (*RespUpdateToken, error) {
	req := c.c.NewRequest(c.name, "AccountService.UpdateToken", in)
	out := new(RespUpdateToken)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) GetToken(ctx context.Context, in *ReqGetToken, opts ...client.CallOption) (*RespGetToken, error) {
	req := c.c.NewRequest(c.name, "AccountService.GetToken", in)
	out := new(RespGetToken)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AccountService service

type AccountServiceHandler interface {
	// 用户注册
	Signup(context.Context, *ReqSignup, *RespSignup) error
	// 用户登录
	Signin(context.Context, *ReqSignin, *RespSignin) error
	// 更新token
	UpdateToken(context.Context, *ReqUpdateToken, *RespUpdateToken) error
	// 获取token
	GetToken(context.Context, *ReqGetToken, *RespGetToken) error
}

func RegisterAccountServiceHandler(s server.Server, hdlr AccountServiceHandler, opts ...server.HandlerOption) error {
	type accountService interface {
		Signup(ctx context.Context, in *ReqSignup, out *RespSignup) error
		Signin(ctx context.Context, in *ReqSignin, out *RespSignin) error
		UpdateToken(ctx context.Context, in *ReqUpdateToken, out *RespUpdateToken) error
		GetToken(ctx context.Context, in *ReqGetToken, out *RespGetToken) error
	}
	type AccountService struct {
		accountService
	}
	h := &accountServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AccountService{h}, opts...))
}

type accountServiceHandler struct {
	AccountServiceHandler
}

func (h *accountServiceHandler) Signup(ctx context.Context, in *ReqSignup, out *RespSignup) error {
	return h.AccountServiceHandler.Signup(ctx, in, out)
}

func (h *accountServiceHandler) Signin(ctx context.Context, in *ReqSignin, out *RespSignin) error {
	return h.AccountServiceHandler.Signin(ctx, in, out)
}

func (h *accountServiceHandler) UpdateToken(ctx context.Context, in *ReqUpdateToken, out *RespUpdateToken) error {
	return h.AccountServiceHandler.UpdateToken(ctx, in, out)
}

func (h *accountServiceHandler) GetToken(ctx context.Context, in *ReqGetToken, out *RespGetToken) error {
	return h.AccountServiceHandler.GetToken(ctx, in, out)
}
